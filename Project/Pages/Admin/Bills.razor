@page "/bills"
@inject BillService BillService

<div class="container p-3 border rounded shadow-sm bg-white">
    <div class="table-responsive">
        <table class="table table-bordered text-center">
            <thead class="table-light">
                <tr>
                    <th>#</th>
                    <th>Product Name</th>
                    <th>Qty.</th>
                    <th>Price</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (BillService.SelectedItems != null && BillService.SelectedItems.Any())
                {
                    @foreach (var (item, index) in BillService.SelectedItems.Select((item, index) => (item, index + 1)))
                    {
                        <tr>
                            <td>@index</td>
                            <td>@item.Name</td>
                            <td>
                                <button class="btn btn-sm btn-success" @onclick="() => IncreaseQuantity(item)">+</button>
                                <input type="text" class="form-control d-inline w-25 text-center" value="@item.Quantity" readonly>
                                <button class="btn btn-sm btn-success" @onclick="() => DecreaseQuantity(item)">-</button>
                            </td>
                            <td>@item.Price</td>
                            <td>
                                <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(item)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
    <div class="d-flex justify-content-between mt-3">
        <div>
            <p>Total Item(s): <strong>@BillService.SelectedItems?.Count()</strong></p>
            <p>Price: <strong>@BillService.TotalAmount</strong></p>
        </div>
        <div>
            <p>Gross Price (inc 15% Tax): <strong>@(BillService.TotalAmount * 1.15m)</strong></p>
        </div>
    </div>
</div>

<!-- Bootstrap Delete Confirmation Modal -->
<div class="modal fade @(ShowDeleteModal ? "show d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="close btn btn-light" @onclick="CancelDelete">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong>@(SelectedItem?.Name)</strong>?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                <button class="btn btn-danger" @onclick="DeleteItem">OK</button>
            </div>
        </div>
    </div>
</div>

<style>
    .modal {
        background: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        border-radius: 10px;
    }
</style>

@code {
    private RateItem? SelectedItem;
    private bool ShowDeleteModal = false;

    protected override void OnInitialized()
    {
        BillService.OnChange += async () => await InvokeAsync(StateHasChanged);
    }

    private async Task IncreaseQuantity(RateItem item)
    {
        item.Quantity++;
        item.Price = item.BasePrice * item.Quantity;
        await BillService.UpdateItemAsync(item);
    }

    private async Task DecreaseQuantity(RateItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            item.Price = item.BasePrice * item.Quantity;
            await BillService.UpdateItemAsync(item);
        }
    }

    private void ConfirmDelete(RateItem item)
    {
        SelectedItem = item;
        ShowDeleteModal = true;
    }

    private async Task DeleteItem()
    {
        if (SelectedItem != null)
        {
            await BillService.RemoveItemAsync(SelectedItem);
            SelectedItem = null;
            await InvokeAsync(StateHasChanged);
        }
        ShowDeleteModal = false;
    }

    private void CancelDelete()
    {
        SelectedItem = null;    
        ShowDeleteModal = false;
    }
}
