@page "/bills"
@inject BillService BillService

<div class="container  border rounded shadow-sm" style=" margin-left:10px; padding-top: 10px">
    <div class="table-responsive" style=" overflow-y: auto; ">
        <table class="table table-bordered  text-center">
            <thead class="table-light">
                <tr>
                    <th>#</th>
                    <th>Product Name</th>
                    <th>Qty.</th>
                    <th>Price</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (BillService.SelectedItems != null && BillService.SelectedItems.Any())
                {
                    @foreach (var (item, index) in BillService.SelectedItems.Select((item, index) => (item, index + 1)))
                    {
                        <tr>
                            <td>@index</td>
                            <td>@item.Name</td>
                            <td>
                                <button class="btn btn-sm btn-success action-btn" @onclick="() => IncreaseQuantity(item)">+</button>
                                <input type="text" class="form-control mini-input text-center" value="@item.Quantity" readonly>
                                <button class="btn btn-sm btn-danger action-btn" @onclick="() => DecreaseQuantity(item)">-</button>
                            </td>
                            <td>@item.Price</td>
                            <td>
                                <button class="btn btn-sm btn-outline-danger delete-btn" @onclick="() => ConfirmDelete(item)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- Fixed Footer Section -->
    <div class="container col-md-6 footer-container">
        <div class="row justify-content-center">
            <div class="col-md-12 footer-content">
                <div class="total-section">
                    <p>Total Item(s): <strong>@BillService.SelectedItems?.Count()</strong></p>
                    <p>Subtotal: <strong>@BillService.TotalAmount</strong></p>
                    <p>Gross Price (inc 15% Tax): <strong>@(BillService.TotalAmount * 1.15m)</strong></p>
                </div>
                <div class="button-section">
                    <button class="btn btn-xs btn-danger mini-btn">
                        <i class="bi bi-x-circle"></i> Cancel
                    </button>
                    <button class="btn btn-xs btn-warning mini-btn">
                        <i class="bi bi-pause-circle"></i> Hold
                    </button>
                    <button class="btn btn-xs btn-success mini-btn">
                        <i class="bi bi-check-circle"></i> Pay
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Bootstrap Delete Confirmation Modal -->
<div class="modal fade @(ShowDeleteModal ? "show d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="close btn btn-light" @onclick="CancelDelete">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete <strong>@(SelectedItem?.Name)</strong>?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-xs btn-secondary" @onclick="CancelDelete">Cancel</button>
                <button class="btn btn-xs btn-danger" @onclick="DeleteItem">OK</button>
            </div>
        </div>
    </div>
</div>

<style>
    
    .modal {
        background: rgba(0, 0, 0, 0.5);
    }

    .modal-content {
        border-radius: 10px;
    }

    
    /* Mini Buttons */
    .mini-btn, .action-btn, .delete-btn {
        font-size: 0.8rem;
        padding: 5px 8px;
        border-radius: 5px;
        transition: all 0.3s ease-in-out;
    }

        .action-btn:hover, .delete-btn:hover, .mini-btn:hover {
            transform: scale(1.1);
        }

    .btn-xs {
        font-size: 0.7rem;
    }

    .mini-input {
        width: 80px;
        font-size: 1rem;
        text-align: center;
        display: inline-block;
        padding:0px;
    }

    /* Table Scroll */
    .table-responsive {
        min-height:480px;
        max-height: 480px;
        overflow-y: auto;
    }

    /* Footer Styling */
    .footer-container {
        margin: 40px 20px 0px 10px;
        position: fixed;
        bottom: 10px;
        left: 0;
     
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
        border-top: 2px solid #ddd;
        
        padding: 10px;
    }

    .footer-content {
        display: flex;
        justify-content: space-between;
        
    }

    .total-section p {
        margin: 0;
        font-weight: bold;
        font-size: 0.9rem;
    }

    .button-section {
        display: flex;
        padding-right:20px;
        justify-content: center;
        gap: 8px;
    }

        .button-section button {
            display: flex;
            justify-content: center;
            align-items:center;
            padding: -10px 2px -10px 2px;
            gap: 8px;
        }
</style>

@code {
    private RateItem? SelectedItem;
    private bool ShowDeleteModal = false;

    protected override void OnInitialized()
    {
        BillService.OnChange += async () => await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        BillService.OnChange -= async () => await InvokeAsync(StateHasChanged);
    }

    private async Task IncreaseQuantity(RateItem item)
    {
        if (item.Quantity == 0)
        {
            item.Quantity = 1; // Set the initial quantity
            item.Price = item.BasePrice; // Set initial price to base price
        }
        else
        {
            item.Quantity++;
            item.Price = item.BasePrice * item.Quantity;
        }

        await BillService.UpdateItemAsync(item);
    }


    private async Task DecreaseQuantity(RateItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            item.Price = item.BasePrice * item.Quantity;
            await BillService.UpdateItemAsync(item);
        }
    }

    private void ConfirmDelete(RateItem item)
    {
        SelectedItem = item;
        ShowDeleteModal = true;
    }

    private async Task DeleteItem()
    {
        if (SelectedItem != null)
        {
            await BillService.RemoveItemAsync(SelectedItem);
            SelectedItem = null;
            await InvokeAsync(StateHasChanged);
        }
        ShowDeleteModal = false;
    }   

    private void CancelDelete()
    {
        SelectedItem = null;
        ShowDeleteModal = false;
    }
}
